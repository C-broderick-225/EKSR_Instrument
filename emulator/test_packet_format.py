#!/usr/bin/env python3
"""
FarDriver Packet Format Test Script

This script validates that the packet format generated by the emulator
matches exactly what the EKSR Instrument firmware expects to receive.
"""

def calculate_checksum(data):
    """Calculate XOR checksum for bytes 1-13"""
    checksum = 0
    for i in range(1, 14):
        checksum ^= data[i]
    return checksum

def validate_packet_format(data, index):
    """Validate packet format matches FarDriver protocol"""
    if len(data) != 16:
        print(f"ERROR: Packet size {len(data)} != 16")
        return False
    
    if data[0] != 0xAA:
        print(f"ERROR: Header 0x{data[0]:02X} != 0xAA")
        return False
    
    if data[1] != index:
        print(f"ERROR: Index {data[1]} != {index}")
        return False
    
    # Validate checksum
    expected_checksum = calculate_checksum(data)
    if data[14] != expected_checksum:
        print(f"ERROR: Checksum 0x{data[14]:02X} != 0x{expected_checksum:02X}")
        return False
    
    if data[15] != 0x00:
        print(f"ERROR: Reserved byte 0x{data[15]:02X} != 0x00")
        return False
    
    return True

def test_packet_0():
    """Test packet index 0 (Main Data)"""
    print("Testing Packet Index 0 (Main Data)...")
    
    # Simulate packet data that would be generated by emulator
    data = bytearray(16)
    data[0] = 0xAA  # Header
    data[1] = 0x00  # Index
    data[2] = 0x0C  # Gear bits (11 = mid gear)
    data[4] = 0x04  # RPM high byte (1024 RPM)
    data[5] = 0x00  # RPM low byte
    data[8] = 0x01  # iq high byte (256 = 2.56A)
    data[9] = 0x00  # iq low byte
    data[10] = 0x00  # id high byte (128 = 1.28A)
    data[11] = 0x80  # id low byte
    
    # Calculate and set checksum
    data[14] = calculate_checksum(data)
    data[15] = 0x00  # Reserved
    
    print(f"Packet: {' '.join(f'{b:02X}' for b in data)}")
    
    if validate_packet_format(data, 0):
        print("✓ Packet 0 format is valid")
        
        # Test firmware parsing
        pData = data[2:]  # Skip header and index
        rpm = (pData[2] << 8) | pData[3]
        gear = ((pData[0] >> 2) & 0x03)
        iq = ((pData[6] << 8) | pData[7]) / 100.0
        id = ((pData[8] << 8) | pData[9]) / 100.0
        
        print(f"  RPM: {rpm}")
        print(f"  Gear: {gear}")
        print(f"  iq: {iq}A")
        print(f"  id: {id}A")
    else:
        print("✗ Packet 0 format is invalid")

def test_packet_1():
    """Test packet index 1 (Voltage)"""
    print("\nTesting Packet Index 1 (Voltage)...")
    
    data = bytearray(16)
    data[0] = 0xAA  # Header
    data[1] = 0x01  # Index
    data[2] = 0x03  # Voltage high byte (900 = 90.0V)
    data[3] = 0x84  # Voltage low byte
    
    # Calculate and set checksum
    data[14] = calculate_checksum(data)
    data[15] = 0x00  # Reserved
    
    print(f"Packet: {' '.join(f'{b:02X}' for b in data)}")
    
    if validate_packet_format(data, 1):
        print("✓ Packet 1 format is valid")
        
        # Test firmware parsing
        pData = data[2:]  # Skip header and index
        voltage = ((pData[0] << 8) | pData[1]) / 10.0
        
        print(f"  Voltage: {voltage}V")
    else:
        print("✗ Packet 1 format is invalid")

def test_packet_4():
    """Test packet index 4 (Controller Temperature)"""
    print("\nTesting Packet Index 4 (Controller Temperature)...")
    
    data = bytearray(16)
    data[0] = 0xAA  # Header
    data[1] = 0x04  # Index
    data[2] = 0x2D  # Temperature (45°C)
    
    # Calculate and set checksum
    data[14] = calculate_checksum(data)
    data[15] = 0x00  # Reserved
    
    print(f"Packet: {' '.join(f'{b:02X}' for b in data)}")
    
    if validate_packet_format(data, 4):
        print("✓ Packet 4 format is valid")
        
        # Test firmware parsing
        pData = data[2:]  # Skip header and index
        temp = pData[0]
        
        print(f"  Controller Temp: {temp}°C")
    else:
        print("✗ Packet 4 format is invalid")

def test_packet_13():
    """Test packet index 13 (Motor Temperature and Throttle)"""
    print("\nTesting Packet Index 13 (Motor Temperature and Throttle)...")
    
    data = bytearray(16)
    data[0] = 0xAA  # Header
    data[1] = 0x0D  # Index (13)
    data[2] = 0x32  # Motor temperature (50°C)
    data[4] = 0x0F  # Throttle high byte (4095 = 100%)
    data[5] = 0xFF  # Throttle low byte
    
    # Calculate and set checksum
    data[14] = calculate_checksum(data)
    data[15] = 0x00  # Reserved
    
    print(f"Packet: {' '.join(f'{b:02X}' for b in data)}")
    
    if validate_packet_format(data, 13):
        print("✓ Packet 13 format is valid")
        
        # Test firmware parsing
        pData = data[2:]  # Skip header and index
        motor_temp = pData[0]
        throttle = (pData[2] << 8) | pData[3]
        
        print(f"  Motor Temp: {motor_temp}°C")
        print(f"  Throttle: {throttle} (raw ADC)")
    else:
        print("✗ Packet 13 format is invalid")

def main():
    """Run all packet format tests"""
    print("FarDriver Packet Format Validation")
    print("=" * 40)
    
    test_packet_0()
    test_packet_1()
    test_packet_4()
    test_packet_13()
    
    print("\n" + "=" * 40)
    print("All tests completed!")

if __name__ == "__main__":
    main() 